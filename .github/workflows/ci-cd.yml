name: CI/CD

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint & format check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install linters
        run: |
          python -m pip install --upgrade pip
          pip install ruff==0.5.6 black==24.4.2 isort==5.13.2

      - name: Ruff (lint)
        run: ruff check .

      - name: Black (format check)
        run: black --check .

      - name: isort (import sort check)
        run: isort --check-only --profile black .

  build:
    name: Build Docker images (backend & frontend)
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: backend/Dockerfile
          tags: backend:ci
          push: false
          load: true

      - name: Build frontend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: frontend/Dockerfile
          tags: frontend:ci
          push: false
          load: true

  deploy:
    name: Deploy to EC2 (self-hosted runner)
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Create .env (base)
        run: |
          cat > .env << 'EOF'
          AWS_REGION=${{ secrets.AWS_REGION }}
          BEDROCK_MODEL_ID=${{ secrets.BEDROCK_MODEL_ID }}
          EMBEDDING_MODEL_ID=${{ secrets.EMBEDDING_MODEL_ID }}
          CHROMA_DIR=/app/data/chroma
          EOF

      - name: Append AWS credentials (static keys)
        run: |
          {
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}"
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          } >> .env

      - name: Compose up (build & restart)
        run: |
          docker compose down
          docker compose up --build -d
